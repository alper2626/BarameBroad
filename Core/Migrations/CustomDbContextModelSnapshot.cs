// <auto-generated />
using System;
using Core.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(CustomDbContext))]
    partial class CustomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BaseEntities.Database.BlogCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BlogCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("BaseEntities.Database.BlogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlogCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex("MasterId");

                    b.ToTable("BlogEntity");
                });

            modelBuilder.Entity("BaseEntities.Database.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MasterCountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterCountryId");

                    b.HasIndex("MasterId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("BaseEntities.Database.ContentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityRelationType")
                        .HasColumnType("int");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("ContentDetail");
                });

            modelBuilder.Entity("BaseEntities.Database.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterBlog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("MasterBlog");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterBlogCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterBlogCategory");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterCity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("MasterCity");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterContentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityRelationType")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("RelatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterContentDetail");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterCountry");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MasterProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterProgramId");

                    b.ToTable("MasterProgram");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSchool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("MasterSchool");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSeoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RelatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterSeoEntity");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSiteConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstCounterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstCounterValue")
                        .HasColumnType("int");

                    b.Property<string>("SecondCounterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondCounterValue")
                        .HasColumnType("int");

                    b.Property<string>("ThirdCounterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThirdCounterValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterSiteConfig");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5073b7b-4c66-4b12-ae40-e3f9e06949eb"),
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 754, DateTimeKind.Local).AddTicks(4870),
                            FirstCounterValue = 0,
                            SecondCounterValue = 0,
                            ThirdCounterValue = 0,
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 754, DateTimeKind.Local).AddTicks(4873)
                        });
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSiteSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterSiteSection");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSss", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterSss");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MasterTeam");
                });

            modelBuilder.Entity("BaseEntities.Database.ProgramEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("ProgramEntity");
                });

            modelBuilder.Entity("BaseEntities.Database.ProgramRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityRelationType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramRelation");
                });

            modelBuilder.Entity("BaseEntities.Database.Reference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("BaseEntities.Database.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("School");
                });

            modelBuilder.Entity("BaseEntities.Database.SeoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("SeoEntity");
                });

            modelBuilder.Entity("BaseEntities.Database.SiteConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutUs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("SiteConfig");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b35e3d8-5abb-4da0-9ef6-ccf40dbcf0aa"),
                            AboutUs = "Hakkımızda Yazısı",
                            Address = "Adres Bilgisi",
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 754, DateTimeKind.Local).AddTicks(4898),
                            Lang = "en-US",
                            MailAddress = "mailadresi@mailadresi.com",
                            MasterId = new Guid("c5073b7b-4c66-4b12-ae40-e3f9e06949eb"),
                            PhoneNumber = "05515515454",
                            SiteName = "Klabs Teknoloji",
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 754, DateTimeKind.Local).AddTicks(4898)
                        },
                        new
                        {
                            Id = new Guid("20f6282d-55f6-4fe8-9929-7b03a6a48fdc"),
                            AboutUs = "Hakkımızda Yazısı",
                            Address = "Adres Bilgisi",
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 754, DateTimeKind.Local).AddTicks(4910),
                            Lang = "tr-TR",
                            MailAddress = "mailadresi@mailadresi.com",
                            MasterId = new Guid("c5073b7b-4c66-4b12-ae40-e3f9e06949eb"),
                            PhoneNumber = "05515515454",
                            SiteName = "Klabs Teknoloji",
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 754, DateTimeKind.Local).AddTicks(4910)
                        });
                });

            modelBuilder.Entity("BaseEntities.Database.SiteSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("SiteSection");
                });

            modelBuilder.Entity("BaseEntities.Database.SocialNetworkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SocialNetworkEntity");
                });

            modelBuilder.Entity("BaseEntities.Database.Sss", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Sss");
                });

            modelBuilder.Entity("BaseEntities.Database.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("BaseEntities.Database.UserComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserComment");
                });

            modelBuilder.Entity("Core.LogModule.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DataRef")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<string>("TableDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserFullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("Module.Auth.Entities.Newsletter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MailAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Registered")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MailAddress")
                        .IsUnique()
                        .HasFilter("[MailAddress] IS NOT NULL");

                    b.ToTable("Newsletters", (string)null);
                });

            modelBuilder.Entity("Module.Auth.Entities.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7be8d00-4434-4636-a467-c511ea307016"),
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(8769),
                            DisplayName = "Admin",
                            Name = "Admin",
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(8777)
                        },
                        new
                        {
                            Id = new Guid("d7be8d00-4434-4636-a467-c511ea307018"),
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(8781),
                            DisplayName = "Personel",
                            Name = "Staff",
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(8781)
                        },
                        new
                        {
                            Id = new Guid("bdc23d6c-2e03-4b0d-b34a-7535d74abbc8"),
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(8784),
                            DisplayName = "Müşteri",
                            Name = "Customer",
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(8784)
                        });
                });

            modelBuilder.Entity("Module.Auth.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5073b7b-4c66-4b12-ae40-e3f9e06949eb"),
                            BirthDay = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(8929),
                            FirstName = "admin",
                            LastName = "admin",
                            LoginName = "admin",
                            MailAddress = "admin@admin.com",
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(8930)
                        });
                });

            modelBuilder.Entity("Module.Auth.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5073b7b-4c66-4b12-ae40-e3f9e06949eb"),
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(9770),
                            OperationClaimId = new Guid("d7be8d00-4434-4636-a467-c511ea307016"),
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(9770),
                            UserId = new Guid("c5073b7b-4c66-4b12-ae40-e3f9e06949eb")
                        },
                        new
                        {
                            Id = new Guid("c5073b7b-4c66-4b12-ae40-e3f9e06947eb"),
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(9773),
                            OperationClaimId = new Guid("d7be8d00-4434-4636-a467-c511ea307018"),
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(9774),
                            UserId = new Guid("c5073b7b-4c66-4b12-ae40-e3f9e06949eb")
                        });
                });

            modelBuilder.Entity("Module.Auth.Entities.UserPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("HashedPassword")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswords", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cbe7509a-3e0d-441e-9e61-905742c652d5"),
                            CreateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(9754),
                            HashedPassword = new byte[] { 142, 5, 223, 254, 155, 156, 53, 144, 30, 48, 151, 21, 195, 172, 58, 136, 188, 64, 54, 48, 40, 66, 187, 46, 82, 241, 8, 34, 72, 230, 237, 185, 227, 204, 168, 130, 165, 162, 216, 165, 237, 66, 255, 64, 113, 10, 250, 6, 232, 18, 85, 221, 184, 180, 134, 209, 11, 254, 134, 119, 162, 188, 31, 5 },
                            PasswordSalt = new byte[] { 252, 90, 187, 43, 18, 185, 46, 244, 76, 37, 211, 112, 144, 66, 33, 50, 202, 130, 139, 0, 7, 219, 101, 170, 210, 167, 1, 72, 79, 49, 22, 96, 212, 26, 102, 41, 86, 73, 50, 104, 189, 71, 45, 87, 55, 246, 186, 222, 155, 153, 134, 127, 123, 233, 83, 50, 73, 224, 139, 141, 66, 142, 78, 234, 21, 13, 233, 131, 89, 239, 203, 111, 81, 189, 46, 106, 101, 131, 100, 174, 245, 77, 232, 112, 47, 94, 96, 244, 243, 136, 111, 228, 176, 150, 54, 30, 183, 142, 172, 35, 13, 63, 27, 66, 132, 169, 17, 114, 214, 47, 255, 51, 85, 137, 70, 88, 111, 59, 255, 22, 116, 204, 72, 71, 100, 193, 64, 171 },
                            UpdateTime = new DateTime(2022, 7, 5, 23, 34, 30, 753, DateTimeKind.Local).AddTicks(9754),
                            UserId = new Guid("c5073b7b-4c66-4b12-ae40-e3f9e06949eb")
                        });
                });

            modelBuilder.Entity("Module.Auth.Entities.UserValidationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ValidationCodeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserValidationCodes", (string)null);
                });

            modelBuilder.Entity("BaseEntities.Database.BlogCategory", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterBlogCategory", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.BlogEntity", b =>
                {
                    b.HasOne("BaseEntities.Database.BlogCategory", null)
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId");

                    b.HasOne("BaseEntities.Database.MasterBlog", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.City", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterCountry", null)
                        .WithMany("Cities")
                        .HasForeignKey("MasterCountryId");

                    b.HasOne("BaseEntities.Database.MasterCity", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.ContentDetail", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterContentDetail", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.CountryEntity", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterCountry", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterBlog", b =>
                {
                    b.HasOne("BaseEntities.Database.BlogCategory", "BlogCategory")
                        .WithMany()
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterCity", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterProgram", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterProgram", "MasterProgramEntity")
                        .WithMany()
                        .HasForeignKey("MasterProgramId");

                    b.Navigation("MasterProgramEntity");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSchool", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterCity", "City")
                        .WithMany("Schools")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BaseEntities.Database.ProgramEntity", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterProgram", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.ProgramRelation", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterProgram", "MasterProgram")
                        .WithMany("ProgramRelations")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterProgram");
                });

            modelBuilder.Entity("BaseEntities.Database.School", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterSchool", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.SeoEntity", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterSeoEntity", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.SiteConfig", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterSiteConfig", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.SiteSection", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterSiteSection", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.Sss", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterSss", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("BaseEntities.Database.TeamEntity", b =>
                {
                    b.HasOne("BaseEntities.Database.MasterTeam", "Master")
                        .WithMany("Childrens")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Module.Auth.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Module.Auth.Entities.OperationClaim", "OperationClaim")
                        .WithMany("OperationClaimUsers")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Module.Auth.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Module.Auth.Entities.UserPassword", b =>
                {
                    b.HasOne("Module.Auth.Entities.User", "User")
                        .WithMany("UserPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Module.Auth.Entities.UserValidationCode", b =>
                {
                    b.HasOne("Module.Auth.Entities.User", "User")
                        .WithMany("UserValidationCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseEntities.Database.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterBlog", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterBlogCategory", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterCity", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterContentDetail", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterCountry", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterProgram", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("ProgramRelations");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSchool", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSeoEntity", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSiteConfig", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterSss", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("BaseEntities.Database.MasterTeam", b =>
                {
                    b.Navigation("Childrens");
                });

            modelBuilder.Entity("Module.Auth.Entities.OperationClaim", b =>
                {
                    b.Navigation("OperationClaimUsers");
                });

            modelBuilder.Entity("Module.Auth.Entities.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserPasswords");

                    b.Navigation("UserValidationCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
